<Modal Title="@Title" ModalId="@ModalId" @ref="_modalRef">
    <BodyContent>
        @if (Model != null)
        {
            <div class="d-flex flex-column gap-4">
                <div class="form-group">
                    <label for="store-name" class="fw-bold mb-2">Name</label>
                    <input @bind="Model.Name" type="text" class="form-control" id="store-name" placeholder="">
                </div>
                <div class="form-group">
                    <label for="store-username" class="fw-bold mb-2">Username</label>
                    <input @bind="Model.Username" type="text" class="form-control" id="store-username" placeholder="">
                </div>
                <div class="form-group">
                    <label for="store-password" class="fw-bold mb-2">Password</label>
                    <input @bind="Model.Password" type="text" class="form-control" id="store-password" placeholder="">
                </div>
            </div>
        }
    </BodyContent>
    <FooterContent>
        <button type="button" class="btn btn-dark px-3" @onclick="SavePassword">Save</button>
    </FooterContent>
</Modal>

@code {

    private Modal? _modalRef;

    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string ModalId { get; set; } = "modal1";
    [Parameter] public PasswordStoreModel? Model { get; set; }
    [Parameter] public EventCallback<PasswordStoreModel> OnSave { get; set; }

    public async Task ShowModal()
    {
        await _modalRef!.ShowModal();
    }

    public async Task HideModal()
    {
        await _modalRef!.HideModal();
    }

    public void UpdateParameter(PasswordStoreModel newModel, string? title = null)
    {
        if (title is not null)
            Title = title;
        Model = newModel;
        StateHasChanged(); // Re-render the child component
    }

    private async Task SavePassword()
    {
        await HideModal();
        await OnSave.InvokeAsync(Model);
    }

}